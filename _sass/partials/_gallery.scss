//
// Photo gallery
//
.gallery {
  @extend .media;

  // bottom caption
  figcaption {
    @extend .caption;
  }
}

//
// Gallery photos
//

.photo {
  display: block;
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 50% 50%;
  transition: transform .25s ease-in-out;
  z-index: 100;

  &.contain {
    background-size: contain;
  }

  // Captions on hover/tap
  &[data-comment] {
    position: relative;
    overflow: hidden;

    &::after {
      font-size: .66em;
      content: attr(data-comment);
      color: white;
      background: rgba(0, 0, 0, .66);

      display: block;
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 1em;
      transform: translateY(100%);
      transition: transform .33333s ease-in-out;
    }

    // Display comment on hover or when photo is selected
    &:hover::after,
    &.photo--caption::after {
      transform: translateY(0);
    }
  }

  // State: JS-enabled
  // .js & {
  //   cursor: zoom-in;
  // }

  // State: JS-active
  // .js &.active {
  //   cursor: zoom-out;
  // }
}

//
// LAYOUT: tall
//

.tall {

  // all photos
  .photo {
    float: left;
    width: 48%;
    padding-bottom: calc(100% / 3);
    margin-bottom: 2%;
    margin-right: 1%;
    margin-left: 1%;
  }

  // special treatment for first image, or manual overrides
  .tall,
  .photo:first-of-type {
    padding-bottom: 103.9%;
    background-position: 25% 0;
  }

  // last photo
  .photo:last-of-type:not(:nth-of-type(even)) {
    width: 98%;
    background-position: 0 25%;
  }

  //
  // wide photos
  //
  .photo.wide {
    float: none;
    clear: both;
    width: 98%;
    background-position: 0 calc(100% / 3);
  }

  // override the last-photo treatment when a wide photo was placed.
  .photo.wide:nth-last-of-type(3) ~ .photo {
    float: left;
    clear: none;
    width: 48%;
  }
}


//
// LAYOUT: wide
//

.wide {

  // all photos
  .photo {
    float: left;
    width: calc(94% / 3); // 100 - (2% x 3 gutters)
    padding-bottom: calc(100% / 3);
    margin-left: 1%;
    margin-right: 1%;
    margin-bottom: 2%;
  }

  // special treatment for first image, or manual overrides
  .wide,
  .photo:first-of-type {
    float: left;
    clear: both;
    width: 98% !important;
    background-position: 0 calc(100% / 3);
  }

  // tetris (when there are two photos in last row)
  .photo:nth-of-type(3n+2):nth-last-of-type(2),
  .photo:nth-of-type(3n+2):nth-last-of-type(2) ~ .photo {
    width: 48%;
  }

  // tetris (when there is one photo in last row)
  .photo:nth-of-type(3n+2):last-of-type {
    width: 98%;
    background-position: 0 25%;
  }
}

.flex-2 {
  display: flex;
  flex-flow: row wrap;

  .photo {
    flex: 1 0 48%;
    padding-bottom: 50%;
    margin: 0 1% 2% 1%;

    // Be default pictures show up in grid format. This forces linear layout on
    // smaller screens. It's not mobile-first because I can keep it to only one
    // !important by doing it this way, and the stuff that supports flexbox is
    // almost guaranteed to support media queries.
    @media (max-width: 500px) {
      flex-basis: 98% !important;
      padding-bottom: 95%;
      margin-bottom: 5%;
    }
  }

  .wide {
    flex-basis: 98%;
  }
}

.flex-3 {
  display: flex;
  flex-flow: row wrap;

  .photo {
    flex: 1 0 31%;
    padding-bottom: 33%;
    margin: 0 1% 2% 1%;

    // Be default pictures show up in grid format. This forces linear layout on
    // smaller screens. It's not mobile-first because I can keep it to only one
    // !important by doing it this way, and the stuff that supports flexbox is
    // almost guaranteed to support media queries.
    @media (max-width: 500px) {
      flex-basis: 98% !important;
      padding-bottom: 95%;
      margin-bottom: 5%;
    }
  }

  .wide { //                #         #
    flex-basis: calc(100% / 1 - (2% * 1));
  }

  .half { //                #         #
    flex-basis: calc(100% / 2 - (2% * 2));
  }

  .third { //               #         #
    flex-basis: calc(100% / 3 - (2% * 3));
  }

  .fourth { //              #         #
    flex-basis: calc(100% / 4 - (2% * 4));
    padding-bottom: 25%;
  }
}
